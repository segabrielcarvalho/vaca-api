# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BannerForListObject {
  createdAt: DateTime!
  description: String
  id: ID!
  imagePath: String!
  imageUrl: String!
  isActive: Boolean
  name: String!
  offerUrl: String
  updatedAt: DateTime!
}

type BannerListObject {
  count: Int!
  rows: [BannerForListObject!]!
}

type BannerObject {
  createdAt: DateTime!
  description: String
  id: ID!
  imagePath: String!
  imageUrl: String!
  isActive: Boolean
  name: String!
  offerUrl: String
  updatedAt: DateTime!
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input ConnectCategoryToFlowInput {
  create: [CreateIaAgentFlowCategoryInput!]!
}

input ConnectDisconnectPlanToIaAgentFlowInput {
  connect: [UniqueFieldIDInput!]
  disconnect: [UniqueFieldIDInput!]
}

input ConnectManyPlansToFlowInput {
  connect: [UniqueFieldIDInput!]!
}

input ConnectManyToKnowledgeBaseInput {
  connect: [UniqueFieldIDInput!]!
}

input ConnectOneToIaAgentInput {
  connect: UniqueFieldIDInput!
}

input ConnectToFolderPathInput {
  connect: PickObjectType!
}

input ConnectToGenericInput {
  connect: UniqueFieldIDInput!
}

input ConnectToMessageInput {
  connect: UniqueFieldIDInput!
}

input ConnectToSessionInput {
  connect: UniqueFieldIDInput!
}

input CreateAgentToFlowCategoryInput {
  create: [IaAgentFlowCategoryOrderCreateInput!]!
}

input CreateBannerInput {
  File: Upload!
  description: String
  isActive: Boolean
  name: String!
  offerUrl: String
}

input CreateDeleteManyToIaAgentInput {
  delete: [UniqueFieldIDInput!]
}

input CreateFileInput {
  Files: [Upload!]!
  Folder: ConnectToFolderPathInput!
}

input CreateFolderInput {
  Parent: ConnectToFolderPathInput
  name: String!
}

input CreateIaAgentFlowCategoryInput {
  Agents: CreateAgentToFlowCategoryInput
  name: String!
  order: Int!
}

input CreateIaAgentFlowInput {
  Banner: String
  Categories: ConnectCategoryToFlowInput!
  Plans: ConnectManyPlansToFlowInput!
  Reordered: [ReorderIaAgentFlowItemInput!]
  comingSoon: Boolean!
  description: String
  isActive: Boolean!
  name: String!
  order: Int!
  tutorialDescription: String!
  tutorialLink: String!
  tutorialTitle: String!
}

input CreateIaAgentInput {
  Model: ConnectOneToIaAgentInput!
  appName: String!
  avatarInBase64: String
  comingSoon: Boolean! = false
  complementaryLink: String
  description: String
  featured: Boolean!
  instruction: String!
  marketplace: Boolean!
  name: String!
  systemMessage: String
  temperature: Float!
  tools: [String!]
}

input CreateKnowledgeBaseInput {
  Folders: ConnectManyToKnowledgeBaseInput!
  name: String!
  qdrantCollectionName: String!
  toolDescription: String!
  toolName: String!
}

input CreateMessageInput {
  Session: ConnectToMessageInput!
  content: String!
  role: MessageRole!
}

input CreateModelInput {
  apiKey: String!
  name: String!
  provider: ModelProviderEnum!
  providerUrl: String!
  slug: String!
}

input CreatePlanInput {
  Limit: CreatePlanWithLimitInput
  code: String!
  name: String!
}

input CreatePlanLimitInput {
  limitType: LimitTypeEnum!
  limitValue: Int!
  period: PeriodUnitEnum!
}

input CreatePlanWithLimitInput {
  create: CreatePlanLimitInput!
}

input CreateSessionInput {
  Agent: ConnectToSessionInput!
  title: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DefaultWhereIdInput {
  id: ID!
}

type FileForListObject {
  Folder: FolderObject!
  createdAt: DateTime!
  folderId: String!
  id: ID!
  mimeType: String
  name: String!
  path: String!
  size: Int
  updatedAt: DateTime!
  url: String!
}

type FileListObject {
  count: Int!
  rows: [FileForListObject!]!
}

type FileObject {
  Folder: FolderObject!
  createdAt: DateTime!
  folderId: String!
  id: ID!
  mimeType: String
  name: String!
  path: String!
  size: Int
  updatedAt: DateTime!
  url: String!
}

input FileToFolderRelationFilterInput {
  is: ListFoldersInput
  isNot: ListFoldersInput
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  notIn: [Float!]
}

type FolderForListObject {
  Children: [FolderObject!]
  Files: [FileObject!]
  Parent: FolderObject
  createdAt: DateTime!
  id: ID!
  name: String!
  parentId: String
  path: String!
  slug: String!
  updatedAt: DateTime!
}

type FolderListObject {
  count: Int!
  rows: [FolderForListObject!]!
}

type FolderObject {
  Children: [FolderObject!]
  Files: [FileObject!]
  Parent: FolderObject
  createdAt: DateTime!
  id: ID!
  name: String!
  parentId: String
  path: String!
  slug: String!
  updatedAt: DateTime!
}

input FolderRelationFilter {
  is: ListFoldersInput
  isNot: ListFoldersInput
}

enum GenderEnum {
  female
  male
  other
}

input IaAgentCreateNestedOneInput {
  connect: UniqueFieldIDInput!
}

type IaAgentFlowCategoryObject {
  Agents: [IaAgentFlowCategoryOrderObject!]
  Flow: IaAgentFlowObject!
  createdAt: DateTime!
  flowId: String!
  id: ID!
  isActive: Boolean!
  name: String!
  order: Int!
  updatedAt: DateTime!
}

input IaAgentFlowCategoryOrderCreateInput {
  Agent: IaAgentCreateNestedOneInput!
  order: Int!
}

type IaAgentFlowCategoryOrderObject {
  Agent: IaAgentObject!
  Category: IaAgentFlowCategoryObject
  agentId: String!
  categoryId: String!
  createdAt: DateTime!
  id: ID!
  isActive: Boolean!
  order: Int!
  updatedAt: DateTime!
}

type IaAgentFlowForListObject {
  Categories: [IaAgentFlowCategoryObject!]
  bannerPath: String
  bannerUrl: String
  comingSoon: Boolean!
  createdAt: DateTime!
  description: String
  id: ID!
  isActive: Boolean!
  name: String!
  order: Int!
  tutorialDescription: String!
  tutorialLink: String!
  tutorialTitle: String!
  updatedAt: DateTime!
}

type IaAgentFlowListObject {
  count: Int!
  rows: [IaAgentFlowForListObject!]!
}

input IaAgentFlowListRelationFilter {
  none: ListIaAgentFlowsInput
  some: ListIaAgentFlowsInput
}

type IaAgentFlowObject {
  Categories: [IaAgentFlowCategoryObject!]
  bannerPath: String
  bannerUrl: String
  comingSoon: Boolean!
  createdAt: DateTime!
  description: String
  id: ID!
  isActive: Boolean!
  name: String!
  order: Int!
  tutorialDescription: String!
  tutorialLink: String!
  tutorialTitle: String!
  updatedAt: DateTime!
}

type IaAgentObject {
  Model: ModelObject!
  Sessions: [SessionObject!]
  appName: String!
  avatarPath: String
  avatarUrl: String
  comingSoon: Boolean!
  complementaryLink: String
  createdAt: DateTime!
  description: String
  featured: Boolean!
  id: ID!
  instruction: String!
  isActive: Boolean!
  marketplace: Boolean!
  modelId: String!
  name: String!
  systemMessage: String
  temperature: Float!
  tools: [String!]
  updatedAt: DateTime!
}

type IaAgentsForListObject {
  Model: ModelObject!
  Sessions: [SessionObject!]
  appName: String!
  avatarPath: String
  avatarUrl: String
  comingSoon: Boolean!
  complementaryLink: String
  createdAt: DateTime!
  description: String
  featured: Boolean!
  id: ID!
  instruction: String!
  isActive: Boolean!
  marketplace: Boolean!
  modelId: String!
  name: String!
  systemMessage: String
  temperature: Float!
  tools: [String!]
  updatedAt: DateTime!
}

type IaAgentsListObject {
  count: Int!
  rows: [IaAgentsForListObject!]!
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: IntFilterBase
  notIn: [Int!]
}

input IntFilterBase {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type KnowledgeBaseFileObject {
  File: FileObject!
  KnowledgeBase: KnowledgeBaseObject!
  createdAt: DateTime!
  fileId: String!
  knowledgeBaseId: String!
}

type KnowledgeBaseForListObject {
  Files: [KnowledgeBaseFileObject!]
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  qdrantCollectionName: String!
  toolDescription: String!
  toolName: String!
  updatedAt: DateTime!
}

type KnowledgeBaseListObject {
  count: Int!
  rows: [KnowledgeBaseForListObject!]!
}

type KnowledgeBaseObject {
  Files: [KnowledgeBaseFileObject!]
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  qdrantCollectionName: String!
  toolDescription: String!
  toolName: String!
  updatedAt: DateTime!
}

enum LimitTypeEnum {
  request
  token
}

input ListBannersInput {
  AND: [ListBannersInput!]
  NOT: [ListBannersInput!]
  OR: [ListBannersInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  isActive: BoolFilter
  name: StringFilter
  offerUrl: StringFilter
  updatedAt: DateTimeFilter
}

input ListDefaultInput {
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ListFilesInput {
  AND: [ListFilesInput!]
  Folder: FileToFolderRelationFilterInput
  NOT: [ListFilesInput!]
  OR: [ListFilesInput!]
  createdAt: DateTimeFilter
  folderId: StringFilter
  id: StringFilter
  mimeType: StringFilter
  name: StringFilter
  path: StringFilter
  size: IntFilter
  updatedAt: DateTimeFilter
}

input ListFoldersInput {
  AND: [ListFoldersInput!]
  NOT: [ListFoldersInput!]
  OR: [ListFoldersInput!]
  Parent: FolderRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  name: StringFilter
  parentId: StringFilter
  path: StringFilter
  slug: StringFilter
  updatedAt: DateTimeFilter
}

input ListIaAgentFlowsInput {
  AND: [ListIaAgentFlowsInput!]
  NOT: [ListIaAgentFlowsInput!]
  OR: [ListIaAgentFlowsInput!]
  Plans: PlanListRelationFilter
  bannerPath: StringFilter
  comingSoon: BoolFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  isActive: BoolFilter
  name: StringFilter
  tutorialDescription: StringFilter
  tutorialLink: StringFilter
  tutorialTitle: StringFilter
  updatedAt: DateTimeFilter
}

input ListIaAgentFlowsOrderByInput {
  createdAt: SortOrder
  order: SortOrder
  updatedAt: SortOrder
}

input ListIaAgentsInput {
  AND: [ListIaAgentsInput!]
  NOT: [ListIaAgentsInput!]
  OR: [ListIaAgentsInput!]
  appName: StringFilter
  createdAt: DateTimeFilter
  description: StringFilter
  featured: BoolFilter
  id: StringFilter
  instruction: StringFilter
  isActive: BoolFilter
  modelId: StringFilter
  name: StringFilter
  systemMessage: StringFilter
  temperature: FloatFilter
  updatedAt: DateTimeFilter
}

input ListKnowledgeBasesInput {
  AND: [ListKnowledgeBasesInput!]
  NOT: [ListKnowledgeBasesInput!]
  OR: [ListKnowledgeBasesInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  isActive: BoolFilter
  name: StringFilter
  qdrantCollectionName: StringFilter
  toolDescription: StringFilter
  toolName: StringFilter
  updatedAt: DateTimeFilter
}

input ListMenteesInput {
  AND: [ListMenteesInput!]
  NOT: [ListMenteesInput!]
  OR: [ListMenteesInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input ListMessagesInput {
  AND: [ListMessagesInput!]
  NOT: [ListMessagesInput!]
  OR: [ListMessagesInput!]
  completionTokens: IntFilter
  content: StringFilter
  createdAt: DateTimeFilter
  eventId: StringFilter
  id: StringFilter
  promptTokens: IntFilter
  sessionId: StringFilter
  timestamp: DateTimeFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input ListModelsInput {
  AND: [ListModelsInput!]
  NOT: [ListModelsInput!]
  OR: [ListModelsInput!]
  apiKey: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isActive: BoolFilter
  name: StringFilter
  slug: StringFilter
  updatedAt: DateTimeFilter
}

input ListPlansInput {
  AND: [ListPlansInput!]
  Flows: IaAgentFlowListRelationFilter
  Mentee: MenteesListRelationFilter
  NOT: [ListPlansInput!]
  OR: [ListPlansInput!]
  code: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  isActive: BoolFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input ListSessionsInput {
  AND: [ListSessionsInput!]
  NOT: [ListSessionsInput!]
  OR: [ListSessionsInput!]
  agentId: StringFilter
  appName: StringFilter
  createdAt: DateTimeFilter
  endedAt: DateTimeFilter
  id: StringFilter
  isActive: BoolFilter
  isPublic: BoolFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

type LoginObject {
  message: String!
  token: String!
}

type MenteeObject {
  Limits: [MenteeUsageLimitObject!]
  Plans: [PlanObject!]
  User: UserObject!
  createdAt: DateTime!
  id: ID!
  type: MenteeTypeEnum!
  updatedAt: DateTime!
  userId: String!
}

enum MenteeTypeEnum {
  fl
  insider
  plat
}

type MenteeUsageLimitObject {
  lastReset: DateTime!
  limitId: String!
  menteeId: String!
  used: Int!
}

input MenteesListRelationFilter {
  none: ListMenteesInput
  some: ListMenteesInput
}

type MessageForListObject {
  Session: SessionObject!
  completionTokens: Int
  content: String!
  createdAt: DateTime!
  id: ID!
  metadataJson: JSON
  promptTokens: Int
  role: MessageRole!
  sessionId: String!
  timestamp: DateTime!
  updatedAt: DateTime!
}

type MessageListObject {
  count: Int!
  rows: [MessageForListObject!]!
}

type MessageObject {
  Session: SessionObject!
  completionTokens: Int
  content: String!
  createdAt: DateTime!
  id: ID!
  metadataJson: JSON
  promptTokens: Int
  role: MessageRole!
  sessionId: String!
  timestamp: DateTime!
  updatedAt: DateTime!
}

enum MessageRole {
  assistant
  system
  tool
  user
}

type MessageSubscriptionObject {
  Session: SessionObject!
  completionTokens: Int
  content: String!
  createdAt: DateTime!
  id: ID!
  metadataJson: JSON
  parentId: String
  promptTokens: Int
  role: MessageRole!
  sessionId: String!
  timestamp: DateTime!
  updatedAt: DateTime!
}

type ModelForListObject {
  IaAgents: [IaAgentObject!]
  apiKey: String!
  createdAt: DateTime!
  id: ID!
  isActive: Boolean!
  name: String!
  provider: ModelProviderEnum!
  providerUrl: String!
  slug: String!
  updatedAt: DateTime!
}

type ModelListObject {
  count: Int!
  rows: [ModelForListObject!]!
}

type ModelObject {
  IaAgents: [IaAgentObject!]
  apiKey: String!
  createdAt: DateTime!
  id: ID!
  isActive: Boolean!
  name: String!
  provider: ModelProviderEnum!
  providerUrl: String!
  slug: String!
  updatedAt: DateTime!
}

enum ModelProviderEnum {
  anthropic
  azureOpenAI
  custom
  google
  openAI
  xAI
}

type Mutation {
  clientLogin(
    """Endereço de e-mail do usuário associado à Central de Vendas."""
    email: String!
  ): LoginObject!
  createBanner(data: CreateBannerInput!): BannerObject!
  createFile(data: CreateFileInput!): [FileObject!]!
  createFolder(data: CreateFolderInput!): FolderObject!
  createIaAgent(data: CreateIaAgentInput!): IaAgentObject!
  createIaAgentFlow(data: CreateIaAgentFlowInput!): IaAgentFlowObject!
  createKnowledgeBase(data: CreateKnowledgeBaseInput!): KnowledgeBaseObject!
  createModel(data: CreateModelInput!): ModelObject!
  createPlan(data: CreatePlanInput!): PlanObject!
  createSession(data: CreateSessionInput!): SessionObject!
  deleteBanner(id: String!): BannerObject!
  deleteFolder(folderId: String!): String!
  deleteModel(id: String!): ModelObject!
  deletePlan(id: String!): PlanObject!
  login(
    """Endereço de e-mail do usuário associado à Central de Vendas."""
    email: String!

    """Senha do usuário."""
    password: String!
  ): LoginObject!
  sendMessage(data: CreateMessageInput!): MessageObject!
  updateBanner(data: UpdateBannerInput!, where: DefaultWhereIdInput!): BannerObject!
  updateFolder(data: UpdateFolderInput!, where: DefaultWhereIdInput!): FolderObject!
  updateIaAgent(data: UpdateIaAgentInput!, where: DefaultWhereIdInput!): IaAgentObject!
  updateIaAgentFlow(data: UpdateIAgentFlowInput!, where: DefaultWhereIdInput!): IaAgentFlowObject!
  updatePlan(data: UpdatePlanInput!, where: DefaultWhereIdInput!): PlanObject!
  updateSession(data: UpdateSessionInput!, where: DefaultWhereIdInput!): SessionObject!
  validateCode(
    """O código a ser validado"""
    code: String!

    """O token da URL de validação, usado para identificar o usuário"""
    token: String!
  ): TokenPairObject!
}

input NestedBoolFilter {
  equals: Boolean!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  notIn: [DateTime!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

enum PeriodUnitEnum {
  day
  hour
  month
  week
  year
}

input PickObjectType {
  path: String!
}

type PlanForListObject {
  Agents: [IaAgentObject!]
  code: String!
  createdAt: DateTime!
  id: ID!
  isActive: Boolean
  name: String!
  updatedAt: DateTime!
}

type PlanListObject {
  count: Int!
  rows: [PlanForListObject!]!
}

input PlanListRelationFilter {
  none: ListPlansInput
  some: ListPlansInput
}

type PlanObject {
  Agents: [IaAgentObject!]
  code: String!
  createdAt: DateTime!
  id: ID!
  isActive: Boolean
  name: String!
  updatedAt: DateTime!
}

type Query {
  getBanner(id: String!): BannerObject!
  getIaAgent(id: String!): IaAgentObject
  getIaAgentFlow(id: String!): IaAgentFlowObject
  getPlan(id: String!): PlanObject!
  getSession(id: String!): SessionObject!
  healthCheck: String!
  listBanners(orderBy: ListDefaultInput, skip: Int, take: Int, where: ListBannersInput): BannerListObject!
  listFiles(orderBy: ListDefaultInput, skip: Int, take: Int, where: ListFilesInput): FileListObject!
  listFolders(orderBy: ListDefaultInput, skip: Int, take: Int, where: ListFoldersInput): FolderListObject!
  listIaAgentFlows(orderBy: ListIaAgentFlowsOrderByInput, skip: Int, take: Int, where: ListIaAgentFlowsInput): IaAgentFlowListObject!
  listIaAgents(orderBy: ListDefaultInput, skip: Int, take: Int, where: ListIaAgentsInput): IaAgentsListObject!
  listKnowledgeBases(orderBy: ListDefaultInput, skip: Int, take: Int, where: ListKnowledgeBasesInput): KnowledgeBaseListObject!
  listMessages(orderBy: ListDefaultInput, skip: Int, take: Int, where: ListMessagesInput): MessageListObject!
  listModels(orderBy: ListDefaultInput, skip: Int, take: Int, where: ListModelsInput): ModelListObject!
  listPlans(orderBy: ListDefaultInput, skip: Int, take: Int, where: ListPlansInput): PlanListObject!
  listSessions(orderBy: ListDefaultInput, skip: Int, take: Int, where: ListSessionsInput): SessionListObject!
  me: UserObject!
}

enum QueryMode {
  default
  insensitive
}

input ReorderIaAgentFlowItemInput {
  id: String!
  order: Int!
}

enum RoleEnum {
  admin
  mentee
  user
}

type SessionForListObject {
  Agent: IaAgentObject!
  Messages: [MessageObject!]
  Participants: [SessionParticipantObject!]
  agentId: String!
  appName: String
  createdAt: DateTime!
  endedAt: DateTime
  id: ID!
  isActive: Boolean!
  isPublic: Boolean!
  stateJson: JSON
  title: String
  updatedAt: DateTime!
  userId: String
}

type SessionListObject {
  count: Int!
  rows: [SessionForListObject!]!
}

type SessionObject {
  Agent: IaAgentObject!
  Messages: [MessageObject!]
  Participants: [SessionParticipantObject!]
  agentId: String!
  appName: String
  createdAt: DateTime!
  endedAt: DateTime
  id: ID!
  isActive: Boolean!
  isPublic: Boolean!
  stateJson: JSON
  title: String
  updatedAt: DateTime!
  userId: String
}

type SessionParticipantObject {
  Session: SessionObject!
  User: UserObject!
  joinedAt: DateTime!
  leftAt: DateTime
  roleInSession: SessionRoleEnum!
  sessionId: String!
  userId: String!
}

enum SessionRoleEnum {
  admin
  guest
  owner
  participant
  support
  system
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Subscription {
  messageAdded(sessionId: String!): MessageSubscriptionObject!
}

type TokenPairObject {
  accessToken: String!
  refreshToken: String!
}

input UniqueFieldIDInput {
  id: ID!
}

input UpdateBannerInput {
  File: Upload
  description: String
  isActive: Boolean
  name: String
  offerUrl: String
}

input UpdateFolderInput {
  Parent: ConnectToGenericInput
  name: String
}

input UpdateIAgentFlowInput {
  File: Upload
  Plans: ConnectDisconnectPlanToIaAgentFlowInput
  comingSoon: Boolean
  description: String
  isActive: Boolean
  name: String
  order: Int
  tutorialDescription: String
  tutorialLink: String
  tutorialTitle: String
}

input UpdateIaAgentInput {
  Model: ConnectOneToIaAgentInput
  Plans: CreateDeleteManyToIaAgentInput
  appName: String
  avatarInBase64: String
  avatarPath: String
  comingSoon: Boolean = false
  complementaryLink: String
  description: String
  featured: Boolean
  instruction: String
  isActive: Boolean
  marketplace: Boolean
  name: String
  systemMessage: String
  temperature: Float
  tools: [String!]
}

input UpdatePlanInput {
  code: String
  isActive: Boolean
  name: String
}

input UpdateSessionInput {
  isActive: Boolean
  title: String
}

scalar Upload

type UserObject {
  Mentee: MenteeObject
  avatarUrl: String!
  createdAt: DateTime!
  email: String!
  gender: GenderEnum
  id: ID!
  isActive: Boolean!
  isTest: Boolean!
  lastSession: DateTime
  name: String!
  role: RoleEnum!
  updatedAt: DateTime!
  verifiedEmail: Boolean!
}